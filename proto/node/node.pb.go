// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/node/node.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetLeaderResponse struct {
	NodeInfo             *NodeInfo `protobuf:"bytes,1,opt,name=NodeInfo,proto3" json:"NodeInfo"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetLeaderResponse) Reset()         { *m = GetLeaderResponse{} }
func (m *GetLeaderResponse) String() string { return proto.CompactTextString(m) }
func (*GetLeaderResponse) ProtoMessage()    {}
func (*GetLeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b558ce09c246314, []int{0}
}

func (m *GetLeaderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLeaderResponse.Unmarshal(m, b)
}
func (m *GetLeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLeaderResponse.Marshal(b, m, deterministic)
}
func (m *GetLeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLeaderResponse.Merge(m, src)
}
func (m *GetLeaderResponse) XXX_Size() int {
	return xxx_messageInfo_GetLeaderResponse.Size(m)
}
func (m *GetLeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLeaderResponse proto.InternalMessageInfo

func (m *GetLeaderResponse) GetNodeInfo() *NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type NodeInfo struct {
	// 服务器地址
	Endpoint string `protobuf:"bytes,1,opt,name=Endpoint,proto3" json:"Endpoint"`
	// 节点ID
	NodeId               string   `protobuf:"bytes,2,opt,name=NodeId,proto3" json:"NodeId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b558ce09c246314, []int{1}
}

func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeInfo.Unmarshal(m, b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *NodeInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func init() {
	proto.RegisterType((*GetLeaderResponse)(nil), "node.GetLeaderResponse")
	proto.RegisterType((*NodeInfo)(nil), "node.NodeInfo")
}

func init() { proto.RegisterFile("proto/node/node.proto", fileDescriptor_2b558ce09c246314) }

var fileDescriptor_2b558ce09c246314 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0xcb, 0x4f, 0x49, 0x05, 0x13, 0x7a, 0x60, 0xbe, 0x10, 0x0b, 0x88, 0x2d, 0x25,
	0x9d, 0x9e, 0x9f, 0x9f, 0x9e, 0x93, 0xaa, 0x0f, 0x16, 0x4b, 0x2a, 0x4d, 0xd3, 0x4f, 0xcd, 0x2d,
	0x28, 0xa9, 0x84, 0x28, 0x51, 0xb2, 0xe7, 0x12, 0x74, 0x4f, 0x2d, 0xf1, 0x49, 0x4d, 0x4c, 0x49,
	0x2d, 0x0a, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xd2, 0xe2, 0xe2, 0xf0, 0xcb, 0x4f,
	0x49, 0xf5, 0xcc, 0x4b, 0xcb, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0xe2, 0xd3, 0x03, 0x1b,
	0x0b, 0x13, 0x0d, 0x82, 0xcb, 0x2b, 0xd9, 0x21, 0xd4, 0x0a, 0x49, 0x71, 0x71, 0xb8, 0xe6, 0xa5,
	0x14, 0xe4, 0x67, 0xe6, 0x95, 0x80, 0xf5, 0x71, 0x06, 0xc1, 0xf9, 0x42, 0x62, 0x5c, 0x6c, 0x60,
	0x75, 0x29, 0x12, 0x4c, 0x60, 0x19, 0x28, 0xcf, 0xc8, 0x9b, 0x8b, 0x1b, 0xc4, 0x0a, 0x4e, 0x2d,
	0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xb2, 0xe1, 0xe2, 0x84, 0xbb, 0x47, 0x48, 0x4c, 0x0f, 0xe2, 0x74,
	0x3d, 0x98, 0xd3, 0xf5, 0x5c, 0x41, 0x4e, 0x97, 0x12, 0x87, 0xb8, 0x06, 0xc3, 0xe1, 0x4e, 0x7c,
	0x51, 0x3c, 0x7a, 0xfa, 0x88, 0xb0, 0x48, 0x62, 0x03, 0xb3, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x05, 0x68, 0xaa, 0x1c, 0x20, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeServiceClient interface {
	// 获取主节点信息
	GetLeader(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLeaderResponse, error)
}

type nodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeServiceClient(cc *grpc.ClientConn) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) GetLeader(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetLeaderResponse, error) {
	out := new(GetLeaderResponse)
	err := c.cc.Invoke(ctx, "/node.NodeService/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
type NodeServiceServer interface {
	// 获取主节点信息
	GetLeader(context.Context, *empty.Empty) (*GetLeaderResponse, error)
}

// UnimplementedNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (*UnimplementedNodeServiceServer) GetLeader(ctx context.Context, req *empty.Empty) (*GetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}

func RegisterNodeServiceServer(s *grpc.Server, srv NodeServiceServer) {
	s.RegisterService(&_NodeService_serviceDesc, srv)
}

func _NodeService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.NodeService/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetLeader(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeader",
			Handler:    _NodeService_GetLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/node/node.proto",
}
